{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Transform": "AWS::Serverless-2016-10-31",
    "Resources": {
        "OrderAPI": {
            "Type": "AWS::Serverless::Api",
            "Properties": {
                "DefinitionBody": {
                    "info": {
                        "title": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    "paths": {
                        "/": {
                            "post": {
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Order"
                                        }
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    },
                                    "500": {
                                        "description": "500 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        },
                                        ".*\"status\":500.*": {
                                            "statusCode": "500",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateOrderFunction.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/nonLocation": {
                            "post": {
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Order"
                                        }
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    },
                                    "500": {
                                        "description": "500 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        },
                                        ".*\"status\":500.*": {
                                            "statusCode": "500",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateNonLocationBasedOrderFunction.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/order/{orderId}/setAsXif": {
                            "post": {
                                "produces": [
                                    "application/json"
                                ],
                                "parameters": [{
                                    "name": "orderId",
                                    "in": "path",
                                    "required": true,
                                    "type": "string"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "requestParameters": {
                                        "integration.request.path.orderId": "method.request.path.orderId",
                                        "integration.request.header.apiKey": "'#{INTERNAL_ORDER_SERVICE_API_KEY}'"
                                    },
                                    "uri": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}/instruction/{orderId}/setAsXif",
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "type": "http_proxy",
                                    "security": [{
                                        "api_key": []
                                    }]
                                }
                            }
                        },
                        "/search/attachment/{searchId}/{attachmentId}": {
                            "get": {
                                "produces": [
                                    "application/json"
                                ],
                                "parameters": [{
                                    "name": "searchId",
                                    "in": "path",
                                    "required": true,
                                    "type": "string"
                                }, {
                                    "name": "attachmentId",
                                    "in": "path",
                                    "required": true,
                                    "type": "string"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "requestParameters": {
                                        "integration.request.path.searchId": "method.request.path.searchId",
                                        "integration.request.path.attachmentId": "method.request.path.attachmentId",
                                        "integration.request.header.apiKey": "'#{INTERNAL_ORDER_SERVICE_API_KEY}'"
                                    },
                                    "uri": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}/search/{searchId}/attachment/{attachmentId}",
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "GET",
                                    "type": "http_proxy"
                                },
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/rubberband": {
                            "post": {
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RubberBandFunction.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/search/{loggedInContact}/{contact}/{status}": {
                            "get": {
                                "parameters": [{
                                    "required": true,
                                    "type": "string",
                                    "name": "loggedInContact",
                                    "in": "path"
                                }, {
                                    "required": true,
                                    "type": "string",
                                    "name": "contact",
                                    "in": "path"
                                }, {
                                    "required": true,
                                    "type": "string",
                                    "name": "status",
                                    "in": "path"
                                }, {
                                    "required": false,
                                    "type": "string",
                                    "name": "start",
                                    "in": "query"
                                }, {
                                    "required": false,
                                    "type": "string",
                                    "name": "count",
                                    "in": "query"
                                }, {
                                    "required": false,
                                    "type": "string",
                                    "name": "filter",
                                    "in": "query"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "requestTemplates": {
                                        "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\" : \"$util.urlDecode($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\" : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OrderFilterFunction.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/draftinstruction": {
                            "post": {
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateDraftOrder.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/instruction/{instructionId}/createSearch": {
                            "post": {
                                "parameters": [{
                                    "required": true,
                                    "type": "integer",
                                    "name": "instructionId",
                                    "in": "path"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateSearch.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/instruction/{instructionId}/createSearches": {
                            "post": {
                                "parameters": [{
                                    "required": true,
                                    "type": "integer",
                                    "name": "instructionId",
                                    "in": "path"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/CreateSearchesResponse"
                                        }
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    },
                                    "500": {
                                        "description": "500 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "requestTemplates": {
                                        "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\r\n\r\n#set($allParams = $input.params())\r\n{\r\n\"bodyJson\" : $input.json('$'),\r\n\"params\" : {\r\n#foreach($type in $allParams.keySet())\r\n\t#if ($type == \"path\")\r\n\t  \"$type\": {\r\n    \t\t#set($params = $allParams.get($type))    \r\n    \t\t#foreach($paramName in $params.keySet())\r\n    \t\t\"$paramName\" : $util.urlDecode($params.get($paramName))\r\n    \t\t\t#if($foreach.hasNext),#end\r\n    \t\t#end\r\n\t\t}\r\n\t#end\r\n#end\r\n}\r\n\r\n}"
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        },
                                        ".*\"status\":500.*": {
                                            "statusCode": "500",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateOrReplaceSearches.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/instruction/{instructionId}/addSearches": {
                            "post": {
                                "parameters": [{
                                    "required": true,
                                    "type": "integer",
                                    "name": "instructionId",
                                    "in": "path"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddSearchesToInstruction.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/searches/{searchId}/updateSearch": {
                            "post": {
                                "parameters": [{
                                    "required": true,
                                    "type": "integer",
                                    "name": "searchId",
                                    "in": "path"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateSearch.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/searches/{searchId}/attachFileToSearch": {
                            "post": {
                                "parameters": [{
                                    "required": true,
                                    "type": "integer",
                                    "name": "searchId",
                                    "in": "path"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "requestTemplates": {
                                        "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\r\n\r\n#set($allParams = $input.params())\r\n{\r\n\"bodyJson\" : $input.json('$'),\r\n\"params\" : {\r\n#foreach($type in $allParams.keySet())\r\n\t#if ($type == \"path\")\r\n\t  \"$type\": {\r\n    \t\t#set($params = $allParams.get($type))    \r\n    \t\t#foreach($paramName in $params.keySet())\r\n    \t\t\"$paramName\" : $util.urlDecode($params.get($paramName))\r\n    \t\t\t#if($foreach.hasNext),#end\r\n    \t\t#end\r\n\t\t}\r\n\t#end\r\n#end\r\n}\r\n\r\n}"
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AttachFileToSearch.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/searches/{searchId}/createSupportCall": {
                            "post": {
                                "parameters": [{
                                    "required": true,
                                    "type": "integer",
                                    "name": "searchId",
                                    "in": "path"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "requestTemplates": {
                                        "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\r\n\r\n#set($allParams = $input.params())\r\n{\r\n\"bodyJson\" : $input.json('$'),\r\n\"params\" : {\r\n#foreach($type in $allParams.keySet())\r\n\t#if ($type == \"path\")\r\n\t  \"$type\": {\r\n    \t\t#set($params = $allParams.get($type))    \r\n    \t\t#foreach($paramName in $params.keySet())\r\n    \t\t\"$paramName\" : $util.urlDecode($params.get($paramName))\r\n    \t\t\t#if($foreach.hasNext),#end\r\n    \t\t#end\r\n\t\t}\r\n\t#end\r\n#end\r\n}\r\n\r\n}"
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateSupportCall.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/searches/{searchId}/outQueueTrigger": {
                            "post": {
                                "parameters": [{
                                    "required": true,
                                    "type": "integer",
                                    "name": "searchId",
                                    "in": "path"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "requestTemplates": {
                                        "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\r\n\r\n#set($allParams = $input.params())\r\n{\r\n\"bodyJson\" : $input.json('$'),\r\n\"params\" : {\r\n#foreach($type in $allParams.keySet())\r\n\t#if ($type == \"path\")\r\n\t  \"$type\": {\r\n    \t\t#set($params = $allParams.get($type))    \r\n    \t\t#foreach($paramName in $params.keySet())\r\n    \t\t\"$paramName\" : $util.urlDecode($params.get($paramName))\r\n    \t\t\t#if($foreach.hasNext),#end\r\n    \t\t#end\r\n\t\t}\r\n\t#end\r\n#end\r\n}\r\n\r\n}"
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OutQueueTrigger.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/searches/{searchId}/updateSearchStatus": {
                            "post": {
                                "parameters": [{
                                    "required": true,
                                    "type": "integer",
                                    "name": "searchId",
                                    "in": "path"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "requestTemplates": {
                                        "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\r\n\r\n#set($allParams = $input.params())\r\n{\r\n\"bodyJson\" : $input.json('$'),\r\n\"params\" : {\r\n#foreach($type in $allParams.keySet())\r\n\t#if ($type == \"path\")\r\n\t  \"$type\": {\r\n    \t\t#set($params = $allParams.get($type))    \r\n    \t\t#foreach($paramName in $params.keySet())\r\n    \t\t\"$paramName\" : $util.urlDecode($params.get($paramName))\r\n    \t\t\t#if($foreach.hasNext),#end\r\n    \t\t#end\r\n\t\t}\r\n\t#end\r\n#end\r\n}\r\n\r\n}"
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateSearchStatus.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/searches/{searchId}/updateSearchPrice": {
                            "post": {
                                "parameters": [{
                                    "required": true,
                                    "type": "integer",
                                    "name": "searchId",
                                    "in": "path"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "requestTemplates": {
                                        "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\r\n\r\n#set($allParams = $input.params())\r\n{\r\n\"bodyJson\" : $input.json('$'),\r\n\"params\" : {\r\n#foreach($type in $allParams.keySet())\r\n\t#if ($type == \"path\")\r\n\t  \"$type\": {\r\n    \t\t#set($params = $allParams.get($type))    \r\n    \t\t#foreach($paramName in $params.keySet())\r\n    \t\t\"$paramName\" : $util.urlDecode($params.get($paramName))\r\n    \t\t\t#if($foreach.hasNext),#end\r\n    \t\t#end\r\n\t\t}\r\n\t#end\r\n#end\r\n}\r\n\r\n}"
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateSearchPrice.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/order/{orderId}/orderItems": {
                            "get": {
                                "parameters": [{
                                    "required": true,
                                    "type": "string",
                                    "name": "orderId",
                                    "in": "path"
                                }, {
                                    "required": false,
                                    "type": "string",
                                    "name": "filterNonProducts",
                                    "in": "query"
                                }, {
                                    "required": false,
                                    "type": "string",
                                    "name": "filterBundle",
                                    "in": "query"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    },
                                    "404": {
                                        "description": "404 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "requestTemplates": {
                                        "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\" : \"$util.urlDecode($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\" : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        },
                                        ".*\"status\":404.*": {
                                            "statusCode": "404",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetOrderItemsFunction.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/metrics/{contact}": {
                            "get": {
                                "parameters": [{
                                    "required": true,
                                    "type": "string",
                                    "name": "contact",
                                    "in": "path"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "requestTemplates": {
                                        "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\" : \"$util.urlDecode($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\" : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetMetricsFunction.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/paused": {
                            "get": {
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "requestTemplates": {
                                        "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\" : \"$util.urlDecode($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\" : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPausedInstructions.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/paused/{orderId}": {
                            "get": {
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "parameters": [{
                                    "name": "orderId",
                                    "in": "path",
                                    "required": true,
                                    "type": "string"
                                }],
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "requestTemplates": {
                                        "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\" : \"$util.urlDecode($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\" : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPausedOrderItemDetails.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/{orderId}/plan": {
                            "get": {
                                "produces": [
                                    "application/json"
                                ],
                                "parameters": [{
                                    "name": "orderId",
                                    "in": "path",
                                    "required": true,
                                    "type": "string"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/InternalAPIError"
                                        }
                                    }
                                },
                                "security": [{
                                    "api_key": []
                                }],
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "requestParameters": {
                                        "integration.request.path.orderId": "method.request.path.orderId",
                                        "integration.request.header.apiKey": "'#{INTERNAL_ORDER_SERVICE_API_KEY}'"
                                    },
                                    "uri": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}/instruction/{orderId}/planImage",
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "GET",
                                    "type": "http_proxy"
                                }
                            }
                        },
                        "/orderItem/status/{statusMarker}": {
                            "get": {
                                "produces": [
                                    "application/json"
                                ],
                                "parameters": [{
                                    "name": "statusMarker",
                                    "in": "path",
                                    "required": true,
                                    "type": "string"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/InternalAPIError"
                                        }
                                    }
                                },
                                "security": [{
                                    "api_key": []
                                }],
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "requestParameters": {
                                        "integration.request.path.statusMarker": "method.request.path.statusMarker",
                                        "integration.request.header.apiKey": "'#{INTERNAL_ORDER_SERVICE_API_KEY}'"
                                    },
                                    "uri": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}/searches/status/{statusMarker}",
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "GET",
                                    "type": "http_proxy"
                                }
                            }
                        },
                        "/searches/{searchId}/getSearchAttachments": {
                            "get": {
                                "produces": [
                                    "application/json",
                                    "application/zip"
                                ],
                                "parameters": [{
                                    "name": "searchId",
                                    "in": "path",
                                    "required": true,
                                    "type": "string"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "404": {
                                        "description": "404 response",
                                        "schema": {
                                            "$ref": "#/definitions/InternalAPIError"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "requestParameters": {
                                        "integration.request.header.apiKey": "'#{INTERNAL_ORDER_SERVICE_API_KEY}'",
                                        "integration.request.path.searchId": "method.request.path.searchId"
                                    },
                                    "uri": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}/search/{searchId}/getSearchAttachment",
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "GET",
                                    "type": "http_proxy"
                                },
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/order/{orderId}/isValidForCompanies": {
                            "post": {
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "parameters": [{
                                    "name": "orderId",
                                    "in": "path",
                                    "required": true,
                                    "type": "string"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    },
                                    "401": {
                                        "description": "401 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "requestParameters": {
                                        "integration.request.header.apiKey": "'#{INTERNAL_ORDER_SERVICE_API_KEY}'",
                                        "integration.request.path.orderId": "method.request.path.orderId"
                                    },
                                    "uri": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}/order/{orderId}/isValidForCompanies",
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "type": "http_proxy"
                                },
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/order/{orderId}/productOptions": {
                            "get": {
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "parameters": [{
                                    "name": "orderId",
                                    "in": "path",
                                    "required": true,
                                    "type": "string"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    },
                                    "401": {
                                        "description": "401 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "requestParameters": {
                                        "integration.request.header.apiKey": "'#{INTERNAL_ORDER_SERVICE_API_KEY}'",
                                        "integration.request.path.orderId": "method.request.path.orderId"
                                    },
                                    "uri": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}/order/productOptions/{orderId}",
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "GET",
                                    "type": "http_proxy"
                                },
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/orderItem/{orderItemId}/priceBandMergedArea": {
                            "post": {
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "parameters": [{
                                    "name": "orderItemId",
                                    "in": "path",
                                    "required": true,
                                    "type": "string"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/PriceBandMergedAreaResponse"
                                        }
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    },
                                    "404": {
                                        "description": "404 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "requestParameters": {
                                        "integration.request.header.apiKey": "'#{INTERNAL_ORDER_SERVICE_API_KEY}'",
                                        "integration.request.path.orderItemId": "method.request.path.orderItemId"
                                    },
                                    "uri": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}/orderItem/{orderItemId}/priceBandMergedArea",
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "GET",
                                    "type": "http_proxy"
                                },
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/orderItem/{orderItemId}/answerQuestion/{question}": {
                            "post": {
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "parameters": [{
                                    "name": "orderItemId",
                                    "in": "path",
                                    "required": true,
                                    "type": "string"
                                }, {
                                    "name": "question",
                                    "in": "path",
                                    "required": true,
                                    "type": "string"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    },
                                    "404": {
                                        "description": "404 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "requestParameters": {
                                        "integration.request.header.apiKey": "'#{INTERNAL_ORDER_SERVICE_API_KEY}'",
                                        "integration.request.path.orderItemId": "method.request.path.orderItemId",
                                        "integration.request.path.question": "method.request.path.question"
                                    },
                                    "uri": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}/orderItem/{orderItemId}/answerQuestion/{question}",
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "type": "http_proxy"
                                },
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/orderItem/{orderItemId}/inQueueTrigger": {
                            "post": {
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "parameters": [{
                                    "name": "orderItemId",
                                    "in": "path",
                                    "required": true,
                                    "type": "string"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    },
                                    "404": {
                                        "description": "404 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "requestParameters": {
                                        "integration.request.header.apiKey": "'#{INTERNAL_ORDER_SERVICE_API_KEY}'",
                                        "integration.request.path.orderItemId": "method.request.path.orderItemId"
                                    },
                                    "uri": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}/search/{orderItemId}/inQueueTrigger",
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "type": "http_proxy"
                                },
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/instruction/{instructionId}/transfer": {
                            "post": {
                                "parameters": [{
                                    "required": true,
                                    "type": "integer",
                                    "name": "instructionId",
                                    "in": "path"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TransferOrder.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/instructions/transfer": {
                            "post": {
                                "parameters": [{
                                    "required": true,
                                    "in": "body",
                                    "name": "TransferOrders",
                                    "schema": {
                                        "$ref": "#/definitions/TransferOrders"
                                    }
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    },
                                    "500": {
                                        "description": "500 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        },
                                        ".*\"status\":500.*": {
                                            "statusCode": "500",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TransferOrders.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/instruction/{instructionId}/confirmSearches": {
                            "post": {
                                "parameters": [{
                                    "required": true,
                                    "type": "integer",
                                    "name": "instructionId",
                                    "in": "path"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "requestTemplates": {
                                        "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload\n#set($allParams = $input.params())\n{\n\"body\" : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\" : \"$util.urlDecode($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\" : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConfirmSearches.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/instruction/{instructionId}/{contactId}": {
                            "get": {
                                "parameters": [{
                                        "required": true,
                                        "type": "integer",
                                        "name": "instructionId",
                                        "in": "path"
                                    },
                                    {
                                        "required": true,
                                        "type": "integer",
                                        "name": "contactId",
                                        "in": "path"
                                    }
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "requestTemplates": {
                                        "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\" : \"$util.urlDecode($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\" : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetSingleInstructionFunction.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "order/{orderId}/systemNote": {
                            "post": {
                                "parameters": [{
                                    "required": true,
                                    "type": "integer",
                                    "name": "orderId",
                                    "in": "path"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/OrderIdAndRequestId"
                                        }
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    },
                                    "500": {
                                        "description": "500 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-request-validator": "Validate body",
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "requestTemplates": {
                                        "application/json": "{\n\"orderId\": $input.params('orderId'),\n\"requestBody\": $input.json('$')\n}"
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        },
                                        ".*\"status\":500.*": {
                                            "statusCode": "500",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SaveOrderSystemNote.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "orderItem/{orderItemId}/systemNote": {
                            "post": {
                                "parameters": [{
                                    "required": true,
                                    "type": "integer",
                                    "name": "orderItemId",
                                    "in": "path"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/OrderIdAndRequestId"
                                        }
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    },
                                    "500": {
                                        "description": "500 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-request-validator": "Validate body",
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "requestTemplates": {
                                        "application/json": "{\n\"orderItemId\": $input.params('orderItemId'),\n\"requestBody\": $input.json('$')\n}"
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        },
                                        ".*\"status\":500.*": {
                                            "statusCode": "500",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SaveSearchSystemNote.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "order/{orderId}/MWUSystemNote": {
                            "post": {
                                "parameters": [{
                                    "required": true,
                                    "type": "integer",
                                    "name": "orderId",
                                    "in": "path"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/OrderIdAndRequestId"
                                        }
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    },
                                    "500": {
                                        "description": "500 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-request-validator": "Validate body",
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "requestTemplates": {
                                        "application/json": "{\n\"orderId\": $input.params('orderId'),\n\"requestBody\": $input.json('$')\n}"
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        },
                                        ".*\"status\":500.*": {
                                            "statusCode": "500",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SaveMWUSystemNote.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "instruction/{instructionId}/gifImage": {
                            "post": {
                                "parameters": [{
                                    "required": true,
                                    "type": "integer",
                                    "name": "instructionId",
                                    "in": "path"
                                }, {
                                    "required": false,
                                    "type": "string",
                                    "name": "monitortool",
                                    "in": "query"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/OrderIdAndRequestId"
                                        }
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    },
                                    "500": {
                                        "description": "500 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-request-validator": "Validate body",
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "requestTemplates": {
                                        "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload\n#set($allParams = $input.params())\n{\n\"bodyJson\" : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\" : \"$util.urlDecode($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\" : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        },
                                        ".*\"status\":500.*": {
                                            "statusCode": "500",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SaveGifImageFunction.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/instruction/{instructionId}/setStatus": {
                            "post": {
                                "parameters": [{
                                    "required": true,
                                    "type": "string",
                                    "name": "instructionId",
                                    "in": "path"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/OrderIdAndRequestId"
                                        }
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    },
                                    "500": {
                                        "description": "500 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "requestTemplates": {
                                        "application/json": "{\n\t\n\t\"instructionId\": $input.params('instructionId')\n\t\n}"
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        },
                                        ".*\"status\":500.*": {
                                            "statusCode": "500",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateOrderStatus.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/instruction/{instructionId}/address": {
                            "post": {
                                "parameters": [{
                                    "required": true,
                                    "type": "string",
                                    "name": "instructionId",
                                    "in": "path"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/OrderIdAndRequestId"
                                        }
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    },
                                    "500": {
                                        "description": "500 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "requestTemplates": {
                                        "application/json": "{\n    \"instructionId\": $input.params('instructionId'),\n    \"address\": $input.json('$.address')\n}"
                                    },

                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        },
                                        ".*\"status\":500.*": {
                                            "statusCode": "500",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateOrderAddress.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/instruction/{instructionId}/confirm": {
                            "post": {
                                "parameters": [{
                                    "required": true,
                                    "type": "string",
                                    "name": "instructionId",
                                    "in": "path"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/OrderIdAndRequestId"
                                        }
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    },
                                    "500": {
                                        "description": "500 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "requestTemplates": {
                                        "application/json": "{\n\t\n\t\"instructionId\": $input.params('instructionId')\n\t\n}"
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        },
                                        ".*\"status\":500.*": {
                                            "statusCode": "500",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConfirmOrder.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/instruction/{instructionId}/polygons": {
                            "post": {
                                "parameters": [{
                                    "required": true,
                                    "type": "string",
                                    "name": "instructionId",
                                    "in": "path"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/OrderIdAndRequestId"
                                        }
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    },
                                    "500": {
                                        "description": "500 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "requestTemplates": {
                                        "application/json": "{\n    \"instructionId\": $input.params('instructionId'),\n    \"geometries\": $input.json('$.geometries')\n}"
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        },
                                        ".*\"status\":500.*": {
                                            "statusCode": "500",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SaveOrderPolygons.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/instruction/{instructionId}/information": {
                            "patch": {
                                "parameters": [{
                                    "required": true,
                                    "type": "string",
                                    "name": "instructionId",
                                    "in": "path"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/OrderIdAndRequestId"
                                        }
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    },
                                    "500": {
                                        "description": "500 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "requestTemplates": {
                                        "application/json": "{\n\"instructionId\": $input.params('instructionId'),\n\"requestBody\": $input.json('$')\n}"
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        },
                                        ".*\"status\":500.*": {
                                            "statusCode": "500",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SaveInfo.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/orderItem/{orderItemId}": {
                            "get": {
                                "parameters": [{
                                    "required": true,
                                    "type": "string",
                                    "name": "orderItemId",
                                    "in": "path"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    },
                                    "404": {
                                        "description": "404 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "requestTemplates": {
                                        "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\" : \"$util.urlDecode($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\" : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        },
                                        ".*\"status\":404.*": {
                                            "statusCode": "404",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetOrderItemDetailsFunction.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/searches/filemerge": {
                            "get": {
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "requestTemplates": {
                                        "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\" : \"$util.urlDecode($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\" : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetMergeSearchesFunction.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/searches/filemerge/rules": {
                            "get": {
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "requestTemplates": {
                                        "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\" : \"$util.urlDecode($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\" : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetMergeRulesFunction.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/recipient/{searchId}/{messageType}": {
                            "get": {
                                "parameters": [{
                                    "required": true,
                                    "type": "integer",
                                    "name": "searchId",
                                    "in": "path"
                                }, {
                                    "required": true,
                                    "type": "string",
                                    "name": "messageType",
                                    "in": "path"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "requestTemplates": {
                                        "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\" : \"$util.urlDecode($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\" : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetGwOutRecipient.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/order/{orderId}/orderPolygon": {
                            "get": {
                                "parameters": [{
                                    "required": true,
                                    "type": "string",
                                    "name": "orderId",
                                    "in": "path"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    },
                                    "404": {
                                        "description": "404 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "requestTemplates": {
                                        "application/json": "{\n\"orderId\": $input.params('orderId')\n}"
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        },
                                        ".*\"status\":404.*": {
                                            "statusCode": "404",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetOrderPolygonFunction.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/searches/{searchId}/attachments": {
                            "get": {
                                "parameters": [{
                                    "required": true,
                                    "type": "string",
                                    "name": "searchId",
                                    "in": "path"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    },
                                    "404": {
                                        "description": "404 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "requestTemplates": {
                                        "application/json": "{\n\"searchId\": $input.params('searchId')\n}"
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        },
                                        ".*\"status\":404.*": {
                                            "statusCode": "404",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetSearchMergeAttachments.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/search/filemerge/{searchId}/dataProvider": {
                            "get": {
                                "produces": [
                                    "application/json"
                                ],
                                "parameters": [{
                                    "name": "searchId",
                                    "in": "path",
                                    "required": true,
                                    "type": "string"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "requestParameters": {
                                        "integration.request.path.searchId": "method.request.path.searchId",
                                        "integration.request.header.apiKey": "'#{INTERNAL_ORDER_SERVICE_API_KEY}'"
                                    },
                                    "uri": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}/search/{searchId}/filemerge/dataProvider",
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "GET",
                                    "type": "http_proxy"
                                },
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/order/HelpDesk/{orderId}": {
                            "get": {
                                "produces": [
                                    "application/json"
                                ],
                                "parameters": [{
                                    "name": "orderId",
                                    "in": "path",
                                    "required": true,
                                    "type": "string"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "requestParameters": {
                                        "integration.request.path.orderId": "method.request.path.orderId",
                                        "integration.request.header.apiKey": "'#{INTERNAL_ORDER_SERVICE_API_KEY}'"
                                    },
                                    "uri": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}/instruction/{orderId}/HelpDesk",
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "GET",
                                    "type": "http_proxy"
                                },
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/search/responseDetails/{searchId}": {
                            "get": {
                                "produces": [
                                    "application/json"
                                ],
                                "parameters": [{
                                    "name": "searchId",
                                    "in": "path",
                                    "required": true,
                                    "type": "string"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "requestParameters": {
                                        "integration.request.path.searchId": "method.request.path.searchId",
                                        "integration.request.header.apiKey": "'#{INTERNAL_ORDER_SERVICE_API_KEY}'"
                                    },
                                    "uri": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}/search/responseDetails/{searchId}",
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "GET",
                                    "type": "http_proxy"
                                },
                                "security": [{
                                    "api_key": []
                                }]

                            }
                        },
                        "/search/setEmailedStatus/{searchId}": {
                            "put": {
                                "produces": [
                                    "application/json"
                                ],
                                "parameters": [{
                                    "name": "searchId",
                                    "in": "path",
                                    "required": true,
                                    "type": "string"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "requestParameters": {
                                        "integration.request.path.searchId": "method.request.path.searchId",
                                        "integration.request.header.apiKey": "'#{INTERNAL_ORDER_SERVICE_API_KEY}'"
                                    },
                                    "uri": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}/search/setEmailedStatus/{searchId}",
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "PUT",
                                    "type": "http_proxy"
                                },
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/search/dataProvider/{searchId}/{dataProviderId}/dataProviderFeeId": {
                            "get": {
                                "produces": [
                                    "application/json"
                                ],
                                "parameters": [{
                                    "name": "searchId",
                                    "in": "path",
                                    "required": true,
                                    "type": "string"
                                }, {
                                    "name": "dataProviderId",
                                    "in": "path",
                                    "required": true,
                                    "type": "string"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "requestParameters": {
                                        "integration.request.path.searchId": "method.request.path.searchId",
                                        "integration.request.path.dataProviderId": "method.request.path.dataProviderId",
                                        "integration.request.header.apiKey": "'#{INTERNAL_ORDER_SERVICE_API_KEY}'"
                                    },
                                    "uri": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}/search/{searchId}/{dataProviderId}/dataProviderFeeId",
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "GET",
                                    "type": "http_proxy"
                                },
                                "security": [{
                                    "api_key": []
                                }]

                            }
                        },
                        "/order/company/{companyId}": {
                            "get": {
                                "parameters": [{
                                    "required": true,
                                    "type": "integer",
                                    "name": "companyId",
                                    "in": "path"
                                }, {
                                    "required": false,
                                    "type": "string",
                                    "name": "filter",
                                    "in": "query"
                                }, {
                                    "required": false,
                                    "type": "integer",
                                    "name": "take",
                                    "in": "query"
                                }, {
                                    "required": false,
                                    "type": "string",
                                    "name": "status",
                                    "in": "query"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    },
                                    "500": {
                                        "description": "500 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "requestTemplates": {
                                        "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\" : \"$util.urlDecode($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\" : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        },
                                        ".*\"status\":500.*": {
                                            "statusCode": "500",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetOrdersForCompanyFunction.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/order/company/{companyId}/clientRef": {
                            "get": {
                                "parameters": [{
                                    "required": true,
                                    "type": "integer",
                                    "name": "companyId",
                                    "in": "path"
                                }, {
                                    "required": false,
                                    "type": "string",
                                    "name": "clientRef",
                                    "in": "path"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response"
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    },
                                    "500": {
                                        "description": "500 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "requestTemplates": {
                                        "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\" : \"$util.urlDecode($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\" : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        },
                                        ".*\"status\":500.*": {
                                            "statusCode": "500",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CheckExistingCompanyReferenceFunction.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/order/{orderId}/invoices": {
                            "get": {
                                "produces": [
                                    "application/zip",
                                    "application/json"
                                ],
                                "parameters": [{
                                    "name": "orderId",
                                    "in": "path",
                                    "required": true,
                                    "type": "string"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "requestParameters": {
                                        "integration.request.path.orderId": "method.request.path.orderId",
                                        "integration.request.header.apiKey": "'#{INTERNAL_ORDER_SERVICE_API_KEY}'"
                                    },
                                    "uri": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}/instruction/{orderId}/invoice",
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "GET",
                                    "type": "http_proxy"
                                },
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/order/{orderId}/directDebits": {
                            "get": {
                                "produces": [
                                    "application/zip",
                                    "application/json"
                                ],
                                "parameters": [{
                                    "name": "orderId",
                                    "in": "path",
                                    "required": true,
                                    "type": "string"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "requestParameters": {
                                        "integration.request.path.orderId": "method.request.path.orderId",
                                        "integration.request.header.apiKey": "'#{INTERNAL_ORDER_SERVICE_API_KEY}'"
                                    },
                                    "uri": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}/instruction/{orderId}/directDebitStatement",
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "GET",
                                    "type": "http_proxy"
                                },
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/order/orderDetails/{companyId}": {
                            "get": {
                                "produces": [
                                    "application/json"
                                ],
                                "parameters": [{
                                    "name": "companyId",
                                    "in": "path",
                                    "required": true,
                                    "type": "string"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "requestParameters": {
                                        "integration.request.path.companyId": "method.request.path.companyId",
                                        "integration.request.header.apiKey": "'#{INTERNAL_ORDER_SERVICE_API_KEY}'"
                                    },
                                    "uri": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}/instruction/orderDetails/{companyId}",
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "GET",
                                    "type": "http_proxy"
                                },
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/search/responseAttachment/{searchId}": {
                            "get": {
                                "produces": [
                                    "application/json"
                                ],
                                "parameters": [{
                                    "name": "searchId",
                                    "in": "path",
                                    "required": true,
                                    "type": "string"
                                }],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "requestParameters": {
                                        "integration.request.path.searchId": "method.request.path.searchId",
                                        "integration.request.header.apiKey": "'#{INTERNAL_ORDER_SERVICE_API_KEY}'"
                                    },
                                    "uri": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}/search/responseAttachment/{searchId}",
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "GET",
                                    "type": "http_proxy"
                                },
                                "security": [{
                                    "api_key": []
                                }]

                            }
                        },
                        "/order/{orderId}/getMergedPolygon": {
                          "get": {
                              "produces": [
                                  "application/json"
                              ],
                              "parameters": [{
                                  "name": "orderId",
                                  "in": "path",
                                  "required": true,
                                  "type": "string"
                              }],
                              "responses": {
                                  "200": {
                                      "description": "200 response",
                                      "schema": {
                                          "$ref": "#/definitions/Empty"
                                      }
                                  }
                              },
                              "x-amazon-apigateway-integration": {
                                  "responses": {
                                      "default": {
                                          "statusCode": "200"
                                      }
                                  },
                                  "requestParameters": {
                                      "integration.request.path.orderId": "method.request.path.orderId",
                                      "integration.request.header.apiKey": "'#{INTERNAL_ORDER_SERVICE_API_KEY}'"
                                  },
                                  "uri": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}/instruction/{orderId}/getMergedPolygon",
                                  "passthroughBehavior": "when_no_match",
                                  "httpMethod": "GET",
                                  "type": "http_proxy"
                              },
                              "security": [{
                                  "api_key": []
                              }]

                          }
                      },
                      "/bookings/{searchId}/getCaseBookingData": {
                        "get": {
                            "produces": [
                                "application/json"
                            ],
                            "parameters": [{
                                "name": "searchId",
                                "in": "path",
                                "required": true,
                                "type": "string"
                            }],
                            "responses": {
                                "200": {
                                    "description": "200 response",
                                    "schema": {
                                        "$ref": "#/definitions/Empty"
                                    }
                                },
                                "400": {
                                    "description": "400 response",
                                    "schema": {
                                        "$ref": "#/definitions/Error"
                                    }
                                } 
                            },
                            "x-amazon-apigateway-integration": {
                                "responses": {
                                    "default": {
                                        "statusCode": "200"
                                    }
                                },
                                "requestParameters": {
                                    "integration.request.path.searchId": "method.request.path.searchId",
                                    "integration.request.header.apiKey": "'#{INTERNAL_ORDER_SERVICE_API_KEY}'"
                                },
                                "uri": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}/search/{searchId}/getCaseBookingData",
                                "passthroughBehavior": "when_no_match",
                                "httpMethod": "GET",
                                "type": "http_proxy"
                            },
                            "security": [{
                                "api_key": []
                            }]
                          }
                        },
                        "/dataProvider/{dataProviderId}/departments": {
                          "get": {
                              "produces": [
                                  "application/json"
                              ],
                              "parameters": [{
                                  "name": "dataProviderId",
                                  "in": "path",
                                  "required": true,
                                  "type": "string"
                              }],
                              "responses": {
                                  "200": {
                                      "description": "200 response",
                                      "schema": {
                                          "$ref": "#/definitions/Empty"
                                      }
                                  },
                                  "400": {
                                      "description": "400 response",
                                      "schema": {
                                          "$ref": "#/definitions/Error"
                                      }
                                  } 
                              },
                              "x-amazon-apigateway-integration": {
                                  "responses": {
                                      "default": {
                                          "statusCode": "200"
                                      }
                                  },
                                  "requestParameters": {
                                      "integration.request.path.dataProviderId": "method.request.path.dataProviderId",
                                      "integration.request.header.apiKey": "'#{INTERNAL_ORDER_SERVICE_API_KEY}'"
                                  },
                                  "uri": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}/dataProvider/{dataProviderId}/departments",
                                  "passthroughBehavior": "when_no_match",
                                  "httpMethod": "GET",
                                  "type": "http_proxy"
                              },
                              "security": [{
                                  "api_key": []
                              }]
                            }
                          },
                        "/order/addOrderToPortfolio": {
                            "post": {
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    },
                                    "400": {
                                        "description": "400 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    },
                                    "500": {
                                        "description": "500 response",
                                        "schema": {
                                            "$ref": "#/definitions/Error"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "requestTemplates": {
                                        "application/json": "## See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\r\n\r\n#set($allParams = $input.params())\r\n{\r\n\"bodyJson\" : $input.json('$'),\r\n\"params\" : {\r\n#foreach($type in $allParams.keySet())\r\n\t#if ($type == \"path\")\r\n\t \"$type\": {\r\n \t\t#set($params = $allParams.get($type)) \r\n \t\t#foreach($paramName in $params.keySet())\r\n \t\t\"$paramName\" : $util.urlDecode($params.get($paramName))\r\n \t\t\t#if($foreach.hasNext),#end\r\n \t\t#end\r\n\t\t}\r\n\t#end\r\n#end\r\n}\r\n\r\n}"
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        },
                                        ".*\"status\":400.*": {
                                            "statusCode": "400",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        },
                                        ".*\"status\":500.*": {
                                            "statusCode": "500",
                                            "responseTemplates": {
                                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"message\" : \"$errorMessageObj.message\",\r\n  \"requestId\" : \"$errorMessageObj.requestId\"\r\n}"
                                            }
                                        }
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddOrderToPortfolioFunction.Arn}/invocations"
                                    }
                                },
                                "produces": [
                                    "application/json"
                                ],
                                "consumes": [
                                    "application/json"
                                ],
                                "security": [{
                                    "api_key": []
                                }]
                            }
                        },
                        "/bookings/requireaction/email": {
                            "get": {
                                "produces": [
                                    "application/json"
                                ],
                                "parameters": [],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "requestParameters": {
                                        "integration.request.header.apiKey": "'#{INTERNAL_ORDER_SERVICE_API_KEY}'"
                                    },
                                    "uri": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}/bookings/requireaction/email",
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "GET",
                                    "type": "http_proxy"
                                },
                                "security": [{
                                    "api_key": []
                                }]
  
                            }
                        }
                    },
                    "swagger": "2.0",
                    "securityDefinitions": {
                        "api_key": {
                            "type": "apiKey",
                            "name": "x-api-key",
                            "in": "header"
                        }
                    },
                    "definitions": {
                        "Empty": {
                            "type": "object",
                            "title": "Empty Schema"
                        },
                        "Error": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                },
                                "requestId": {
                                    "type": "string"
                                }
                            }
                        },
                        "InternalAPIError": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        },
                        "TransferOrders": {
                            "type": "object",
                            "properties": {
                                "whoReassignedId": {
                                    "type": "integer"
                                },
                                "previousContactId": {
                                    "type": "integer"
                                },
                                "assignedContactId": {
                                    "type": "integer"
                                },
                                "assignedContact": {
                                    "type": "string"
                                },
                                "whoReassigned": {
                                    "type": "string"
                                },
                                "previousContact": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "whoReassignedId",
                                "previousContactId",
                                "assignedContactId",
                                "assignedContact",
                                "whoReassigned",
                                "previousContact"
                            ]
                        },
                        "Order": {
                            "type": "object",
                            "properties": {
                                "orderId": {
                                    "type": "number"
                                },
                                "requestId": {
                                    "type": "string"
                                }
                            }
                        },
                        "PriceBandMergedAreaResponse": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "lowerBound": {
                                        "type": "number",
                                        "title": "The lower bound of the associated price band",
                                        "description": "The lower bound of the associated price band",
                                        "examples": "0"
                                    },
                                    "upperBound": {
                                        "type": "number",
                                        "title": "The upper bound of the associated price band",
                                        "description": "The upper bound of the associated price band",
                                        "examples": "150000"
                                    }
                                }
                            }
                        },
                        "OrderIdAndRequestId": {
                            "type": "object",
                            "properties": {
                                "orderId": {
                                    "type": "integer",
                                    "title": "The orderId",
                                    "description": "The orderId for the gif image",
                                    "examples": 10466029
                                },
                                "requestId": {
                                    "type": "string",
                                    "title": "The requestId",
                                    "description": "The AWS request Id to track the request",
                                    "examples": "LAMBDA_INVOKE"
                                }
                            }
                        },
                        "CreateSearchesResponse": {
                            "type": "object",
                            "properties": {
                                "orderId": {
                                    "type": "integer",
                                    "title": "The orderId",
                                    "description": "The orderId for the gif image",
                                    "examples": 10466029
                                },
                                "requestId": {
                                    "type": "string",
                                    "title": "The requestId",
                                    "description": "The AWS request Id to track the request",
                                    "examples": "LAMBDA_INVOKE"
                                },
                                "searchIds": {
                                    "type": "array",
                                    "title": "Search IDs",
                                    "description": "The Search Ids that were created",
                                    "items": {
                                        "type": "integer",
                                        "examples": "[1234566,1234567]"
                                    }

                                }
                            }
                        }
                    },
                    "x-amazon-apigateway-request-validators": {
                        "Validate body": {
                            "validateRequestParameters": false,
                            "validateRequestBody": true
                        }
                    },

                    "x-amazon-apigateway-binary-media-types": [
                        "image/gif",
                        "application/zip"
                    ]
                },
                "StageName": "v2"
            }
        },
        "AuthenticateContactFunction": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}",
                        "INTERNAL_CONTACT_SERVICE_ENDPOINT": "#{INTERNAL_CONTACT_SERVICE_ENDPOINT}"
                    }
                },
                "Handler": "src/functions/fnAuthenticateContact.handler",
                "Timeout": 180,
                "MemorySize": 1536,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Policies": "AWSLambdaRole"
            }
        },
        "CreateOrderFunction": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "INTERNAL_PRICE_SERVICE_ENDPOINT": "#{INTERNAL_PRICE_SERVICE_ENDPOINT}",
                        "GET_PRICES_FUNCTION_NAME": "#{GET_PRICES_FUNCTION_NAME}",
                        "LMK_SEARCHFLOW_ORDER_API_ENDPOINT": "#{LMK_SEARCHFLOW_ORDER_API_ENDPOINT}",
                        "LMK_SEARCHFLOW_API_KEY": "#{LMK_SEARCHFLOW_API_KEY}",
                        "PRICE_LAMBDA_ENDPOINT": "#{PRICE_LAMBDA_ENDPOINT}",
                        "PRICE_LAMBDA_KEY": "#{PRICE_LAMBDA_KEY}"
                    }
                },
                "Handler": "src/functions/fnCreateOrder.handler",
                "Timeout": 180,
                "MemorySize": 1536,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Policies": "AWSLambdaRole",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "post"
                        }
                    }
                }
            }
        },
        "CreateNonLocationBasedOrderFunction": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "INTERNAL_PRICE_SERVICE_ENDPOINT": "#{INTERNAL_PRICE_SERVICE_ENDPOINT}",
                        "GET_PRICES_FUNCTION_NAME": "#{GET_PRICES_FUNCTION_NAME}",
                        "LMK_SEARCHFLOW_ORDER_API_ENDPOINT": "#{LMK_SEARCHFLOW_ORDER_API_ENDPOINT}",
                        "LMK_SEARCHFLOW_API_KEY": "#{LMK_SEARCHFLOW_API_KEY}"
                    }
                },
                "Handler": "src/functions/fnCreateNonLocationBasedOrder.createNonLocationBasedOrderHandler",
                "Timeout": 180,
                "MemorySize": 1536,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Policies": "AWSLambdaRole",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/nonLocation",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "post"
                        }
                    }
                }
            }
        },
        "UpdateOrderAddress": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}"
                    }
                },
                "Handler": "src/functions/fnUpdateOrderAddress.handler",
                "Timeout": 180,
                "MemorySize": 1536,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Policies": "AWSLambdaRole",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/instruction/{instructionId}/address",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "post"
                        }
                    }
                }
            }
        },
        "SaveOrderPolygons": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}"
                    }
                },
                "Handler": "src/functions/fnSavePolygon.handler",
                "Timeout": 180,
                "MemorySize": 1536,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Policies": "AWSLambdaRole",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/instruction/{instructionId}/polygons",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "post"
                        }
                    }
                }
            }
        },
        "SaveDateAndName": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}"
                    }
                },
                "Handler": "src/functions/fnSaveDateAndName.handler",
                "Timeout": 180,
                "MemorySize": 1536,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10"
            }
        },
        "SaveFeeEarnerAndBranch": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}"
                    }
                },
                "Handler": "src/functions/fnSaveFeeEarnerAndBranch.handler",
                "Timeout": 180,
                "MemorySize": 1536,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10"
            }
        },
        "SaveInfo": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}"
                    }
                },
                "Handler": "src/functions/fnSaveOrderInfo.handler",
                "Timeout": 30,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/instruction/{instructionId}/information",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "patch"
                        }
                    }
                }
            }
        },
        "UpdateOrderStatus": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}"
                    }
                },
                "Handler": "src/functions/fnUpdateOrderStatus.handler",
                "Timeout": 30,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/instruction/{instructionId}/setStatus",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "post"
                        }
                    }
                }
            }
        },
        "ConfirmOrder": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}"
                    }
                },
                "Handler": "src/functions/fnConfirmOrder.handler",
                "Timeout": 30,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/instruction/{instructionId}/confirm",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "post"
                        }
                    }
                }
            }
        },
        "CallbackLandmark": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "LMK_SEARCHFLOW_API_KEY": "#{LMK_SEARCHFLOW_API_KEY}",
                        "LMK_SEARCHFLOW_ORDER_API_ENDPOINT": "#{LMK_SEARCHFLOW_ORDER_API_ENDPOINT}"
                    }
                },
                "Handler": "src/functions/fnCallbackLandmark.handler",
                "Timeout": 30,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10"
            }
        },
        "UpdateSearchStatus": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "INTERNAL_PRICE_SERVICE_ENDPOINT": "#{INTERNAL_PRICE_SERVICE_ENDPOINT}"
                    }
                },
                "Handler": "src/functions/fnUpdateSearchStatus.handler",
                "Timeout": 30,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/searches/{searchId}/updateSearchStatus",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "post"
                        }
                    }
                }
            }
        },
        "UpdateSearchPrice": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "PRICE_LAMBDA_ENDPOINT": "#{PRICE_LAMBDA_ENDPOINT}",
                        "PRICE_LAMBDA_KEY": "#{PRICE_LAMBDA_KEY}"
                    }
                },
                "Handler": "src/functions/fnUpdateSearchPrice.handler",
                "Timeout": 30,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/searches/{searchId}/updateSearchPrice",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "post"
                        }
                    }
                }
            }
        },
        "CreateSupportCall": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "INTERNAL_PRICE_SERVICE_ENDPOINT": "#{INTERNAL_PRICE_SERVICE_ENDPOINT}"
                    }
                },
                "Handler": "src/functions/fnCreateSupportCall.handler",
                "Timeout": 30,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/searches/{searchId}/createSupportCall",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "post"
                        }
                    }
                }
            }
        },
        "OutQueueTrigger": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "INTERNAL_PRICE_SERVICE_ENDPOINT": "#{INTERNAL_PRICE_SERVICE_ENDPOINT}"
                    }
                },
                "Handler": "src/functions/fnQueueTrigger.handler",
                "Timeout": 30,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/searches/{searchId}/outQueueTrigger",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "post"
                        }
                    }
                }
            }
        },
        "RubberBandFunction": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}"
                    }
                },
                "Handler": "src/functions/fnRubberBand.handler",
                "Timeout": 30,
                "MemorySize": 1536,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Policies": "AWSLambdaExecute",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/rubberband",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "post"
                        }
                    }
                }
            }
        },
        "OrderFilterFunction": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}"
                    }
                },
                "Handler": "src/functions/fnFilterOrder.handler",
                "Timeout": 30,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/search/{loggedInContact}/{contact}/{status}",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "get"
                        }
                    }
                }
            }
        },
        "GetOrderItemsFunction": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}"
                    }
                },
                "Handler": "src/functions/fnGetOrderItems.handler",
                "Timeout": 30,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/order/{orderId}/orderItems",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "get"
                        }
                    }
                }
            }
        },
        "CreateDraftOrder": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}"
                    }
                },
                "Handler": "src/functions/fnCreateOrder.createDraftOrderHandler",
                "Timeout": 30,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/draftinstruction",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "post"
                        }
                    }
                }
            }
        },
        "CreateSearch": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}",
                        "GET_PRICES_FUNCTION_NAME": "#{GET_PRICES_FUNCTION_NAME}"
                    }
                },
                "Handler": "src/functions/fnCreateSearch.searchHandler",
                "Timeout": 30,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Policies": "AWSLambdaRole",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/instruction/{instructionId}/createSearch",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "post"
                        }
                    }
                }
            }
        },
        "AddSearchesToInstruction": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}",
                        "INTERNAL_PRICE_SERVICE_ENDPOINT": "#{INTERNAL_PRICE_SERVICE_ENDPOINT}",
                        "GET_PRICES_FUNCTION_NAME": "#{GET_PRICES_FUNCTION_NAME}"
                    }
                },
                "Handler": "src/functions/fnCreateSearch.addSearchHandler",
                "Timeout": 30,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Policies": "AWSLambdaRole",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/instruction/{instructionId}/addSearches",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "post"
                        }
                    }
                }
            }
        },
        "CreateOrReplaceSearches": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}",
                        "INTERNAL_PRICE_SERVICE_ENDPOINT": "#{INTERNAL_PRICE_SERVICE_ENDPOINT}",
                        "GET_PRICES_FUNCTION_NAME": "#{GET_PRICES_FUNCTION_NAME}"
                    }
                },
                "Handler": "src/functions/fnCreateSearch.handler",
                "Timeout": 30,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Policies": "AWSLambdaRole",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/instruction/{instructionId}/createSearches",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "post"
                        }
                    }
                }
            }
        },
        "UpdateSearch": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}"
                    }
                },
                "Handler": "src/functions/fnCreateSearch.updateHandler",
                "Timeout": 30,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/searches/{searchId}/updateSearch",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "post"
                        }
                    }
                }
            }
        },
        "AttachFileToSearch": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}"
                    }
                },
                "Handler": "src/functions/fnAttachFileToSearch.handler",
                "Timeout": 30,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/searches/{searchId}/attachFileToSearch",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "post"
                        }
                    }
                }
            }
        },
        "GetMetricsFunction": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}"
                    }
                },
                "Handler": "src/functions/fnGetMetrics.handler",
                "Timeout": 30,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/metrics/{contact}",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "get"
                        }
                    }
                }
            }
        },
        "GetPausedInstructions": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}"
                    }
                },
                "Handler": "src/functions/fnGetPausedInstructions.handler",
                "Timeout": 30,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/paused",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "get"
                        }
                    }
                }
            }
        },
        "GetPausedOrderItemDetails": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}"
                    }
                },
                "Handler": "src/functions/fnGetMonitorOrderItems.handler",
                "Timeout": 30,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/paused/{orderId}",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "get"
                        }
                    }
                }
            }
        },
        "SaveGifImageFunction": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}"
                    }
                },
                "Handler": "src/functions/fnSaveGifImage.handler",
                "Timeout": 30,
                "MemorySize": 1536,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/instruction/{instructionId}/gifImage",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "post"
                        }
                    }
                }
            }
        },
        "SaveOrderSystemNote": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}",
                        "LMK_SEARCHFLOW_ORDER_API_ENDPOINT": "#{LMK_SEARCHFLOW_ORDER_API_ENDPOINT}",
                        "LMK_SEARCHFLOW_API_KEY": "#{LMK_SEARCHFLOW_API_KEY}"
                    }
                },
                "Handler": "src/functions/fnSaveOrderSystemNote.handler",
                "Timeout": 30,
                "MemorySize": 1536,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/order/{orderId}/systemNote",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "post"
                        }
                    }
                }
            }
        },
        "SaveSearchSystemNote": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}",
                        "LMK_SEARCHFLOW_ORDER_API_ENDPOINT": "#{LMK_SEARCHFLOW_ORDER_API_ENDPOINT}",
                        "LMK_SEARCHFLOW_API_KEY": "#{LMK_SEARCHFLOW_API_KEY}"
                    }
                },
                "Handler": "src/functions/fnSaveSearchSystemNote.handler",
                "Timeout": 30,
                "MemorySize": 1536,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/orderItem/{orderItemId}/systemNote",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "post"
                        }
                    }
                }
            }
        },
        "SaveMWUSystemNote": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}",
                        "LMK_SEARCHFLOW_ORDER_API_ENDPOINT": "#{LMK_SEARCHFLOW_ORDER_API_ENDPOINT}",
                        "LMK_SEARCHFLOW_API_KEY": "#{LMK_SEARCHFLOW_API_KEY}"
                    }
                },
                "Handler": "src/functions/fnSaveMWUSystemNote.handler",
                "Timeout": 30,
                "MemorySize": 1536,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/order/{orderId}/MWUSystemNote",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "post"
                        }
                    }
                }
            }
        },
        "TransferOrder": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}"
                    }
                },
                "Handler": "src/functions/fnTransferOrder.handler",
                "Timeout": 30,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Policies": "AWSLambdaRole",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/instruction/{instructionId}/transfer",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "post"
                        }
                    }
                }
            }
        },
        "TransferOrders": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}"
                    }
                },
                "Handler": "src/functions/fnTransferOrders.handler",
                "Timeout": 30,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Policies": "AWSLambdaRole",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/instructions/transfer",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "post"
                        }
                    }
                }
            }
        },
        "ConfirmSearches": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}"
                    }
                },
                "Handler": "src/functions/fnConfirmSearches.handler",
                "Timeout": 30,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Policies": "AWSLambdaRole",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/instruction/{instructionId}/confirmSearches",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "post"
                        }
                    }
                }
            }
        },
        "GetSingleInstructionFunction": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}"
                    }
                },
                "Handler": "src/functions/fnGetSingleInstruction.handler",
                "Timeout": 30,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/instruction/{instructionId}/{contactId}",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "get"
                        }
                    }
                }
            }
        },
        "GetOrderItemDetailsFunction": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}"
                    }
                },
                "Handler": "src/functions/fnGetOrderItemDetails.handler",
                "Timeout": 30,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/orderItem/{orderItemId}",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "get"
                        }
                    }
                }
            }
        },
        "GetMergeSearchesFunction": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}"
                    }
                },
                "Handler": "src/functions/fnGetMergeSearches.handler",
                "Timeout": 30,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/searches/filemerge",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "get"
                        }
                    }
                }
            }
        },
        "GetMergeRulesFunction": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}"
                    }
                },
                "Handler": "src/functions/fnGetMergeRules.handler",
                "Timeout": 30,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/searches/filemerge/rules",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "get"
                        }
                    }
                }
            }
        },
        "GetGwOutRecipient": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}"
                    }
                },
                "Handler": "src/functions/fnGetGwOutRecipient.handler",
                "Timeout": 30,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/recipient/{searchId}/{messageType}",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "get"
                        }
                    }
                }
            }
        },
        "GetOrderPolygonFunction": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}"
                    }
                },
                "Handler": "src/functions/fnGetOrderPolygon.handler",
                "Timeout": 30,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/order/{orderId}/orderPolygon",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "get"
                        }
                    }
                }
            }
        },
        "GetSearchMergeAttachments": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}"
                    }
                },
                "Handler": "src/functions/fnGetSearchMergeAttachments.handler",
                "Timeout": 30,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/searches/{searchId}/attachments",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "get"
                        }
                    }
                }
            }
        },
        "GetOrdersForCompanyFunction": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}"
                    }
                },
                "Handler": "src/functions/fnGetOrdersForCompany.handler",
                "Timeout": 30,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/order/company/{companyId}",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "get"
                        }
                    }
                }
            }
        },
        "CheckExistingCompanyReferenceFunction": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_ORDER_SERVICE_ENDPOINT": "#{INTERNAL_ORDER_SERVICE_ENDPOINT}",
                        "INTERNAL_ORDER_SERVICE_API_KEY": "#{INTERNAL_ORDER_SERVICE_API_KEY}"
                    }
                },
                "Handler": "src/functions/fnCheckExistingCompanyReference.handler",
                "Timeout": 30,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/order/company/{companyId}/clientRef",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "get"
                        }
                    }
                }
            }
        },
        "AddOrderToPortfolioFunction": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "ENVIRONMENT": "#{bamboo_deploy_environment}",
                        "INTERNAL_PORTFOLIO_SERVICE_ENDPOINT": "#{INTERNAL_PORTFOLIO_SERVICE_ENDPOINT}",
                        "INTERNAL_PORTFOLIO_SERVICE_API_KEY": "#{INTERNAL_PORTFOLIO_SERVICE_API_KEY}"
                    }
                },
                "Handler": "src/functions/fnAddOrderToPortfolio.handler",
                "Timeout": 30,
                "CodeUri": "dist/searchflow_order_lambda_latest.zip",
                "Runtime": "nodejs8.10",
                "Events": {
                    "GetResource": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/order/addOrderToPortfolio/",
                            "RestApiId": {
                                "Ref": "OrderAPI"
                            },
                            "Method": "post"
                        }
                    }
                }
            }
        }
    },
    "Description": "searchflow-order-lambda"
}